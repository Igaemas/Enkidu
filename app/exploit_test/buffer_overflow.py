from app.output_functions import output
import subprocess
import os

MAX_OFFSET = 128

#
# Function to inject the payload to the binary
#
def inject_payload(payload, TARGET_FILE_PATH):
    proc = subprocess.Popen(TARGET_FILE_PATH, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = proc.communicate(input=payload.encode())
    response = stdout + stderr
    return response, proc.returncode
#
# Function increase the Offset
#
def getting_offset(offset, binary_info):
    bit = binary_info["bit"]
    if bit == 32:
        return offset + 4
    elif bit == 64:
        return offset + 8
    else:
        output("-", 1, "This bit value is not considered (need 32/64 bit).")

#
# Function to tell if the binary is vulnerable to BoF or not
#
def is_vulnerable(returncode):
    SEG_FAULT_CODE = -11

    if returncode == SEG_FAULT_CODE:
        return True
    else:
        return False

def test_buffer_overflow(binary_info, TARGET_FILE_PATH, VERBOSE):
    output("+", 0, "Testing buffer overflow.")
    
    bof_object = {
        "Vulnerable": False,
        "Offset": 0
    }
    offset = 0

    while offset < MAX_OFFSET and not bof_object["Vulnerable"]:

        offset = getting_offset(offset, binary_info)
        payload = "A" * offset

        output("info", 1, f"Payload generated : {payload}") if VERBOSE else None

        response, returncode = inject_payload(payload, TARGET_FILE_PATH)
        
        if is_vulnerable(returncode):
            bof_object["Vulnerable"] = True
            bof_object["Offset"] = offset
        else:
            continue

    output("+", 1, f"{binary_info['name']} vulnerable with {bof_object['Offset']} offset.")
    
    return bof_object
